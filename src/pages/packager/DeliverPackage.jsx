import React, { useEffect, useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom';
import PackageScanner from './PackageScanner';
import Swal from 'sweetalert2';
import api, { BASE_URL } from '../../utils/api';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBarcode } from '@fortawesome/free-solid-svg-icons';

const DeliverPackage = () => {
  const [userCode, setUserCode] = useState('');
  const [userData, setUserData] = useState(null);
  const { id: dormID } = useParams();
  const navigate = useNavigate();

  const [packages, setPackages] = useState([]);
  const [selectedPackage, setSelectedPackage] = useState([]);

  useEffect(() => {
    if (userCode) {
      if (userCode == '-99') {
        setUserData({
          fullName: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
          id: -99, // userID
          roomID: '',
          roomNo: '-',
          email: ''
        })
      } else {
        checkUser();
      }
    }
  }, [userCode]);

  useEffect(() => {
    console.log(selectedPackage)
  }, [selectedPackage])

  useEffect(() => {
    console.log(userData?.id)
    if (userData && userData?.id) {
      fetchPackages(userData.id);
    }
  }, [userData?.id]);

  const checkUser = async () => {
    try {
      const res = await api.post('/dorm-user/checkIfUserInDorm', {
        code: userCode,
        dormID
      });

      setUserData(res.data);
      console.log(res.data)

    } catch (err) {
      Swal.fire({
        icon: 'error',
        title: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      }).then(() => {
        setUserCode('');
      });
    }
  };

  const fetchPackages = async (recipientID) => {
    try {
      const res = await api.post('/package/fetchToDeliver', {
        recipientID,
        dormID
      });
      setPackages(res.data);
      console.log(res.data)
    } catch (err) {
      console.error('Error fetching packages', err);
    }
  };

  function formatThaiDateTime(isoString) {
    const date = new Date(isoString);
    const thaiDate = new Date(date.toLocaleString('en-US', { timeZone: 'Asia/Bangkok' }));

    const day = thaiDate.getDate();
    const month = thaiDate.getMonth();
    const year = thaiDate.getFullYear() + 543;
    const hours = thaiDate.getHours().toString().padStart(2, '0');
    const minutes = thaiDate.getMinutes().toString().padStart(2, '0');

    const thaiMonths = [
      '‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
      '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'
    ];

    return `${day} ${thaiMonths[month]} ${year} ${hours}:${minutes} ‡∏ô.`;
  }

  const toggleSelectPackage = (id) => {
    setSelectedPackage(prev =>
      prev.includes(id)
        ? prev.filter(pkgID => pkgID !== id)
        : [...prev, id]
    );
  };

  const handleDeliver = async () => {
    const confirm = await Swal.fire({
      title: `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢`,
      text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏™‡∏î‡∏∏ ${selectedPackage.length} ‡∏ä‡∏¥‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ${userData.fullName} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    });

    if (confirm.isConfirmed) {
      try {
        await api.post('/package/deliverPackage', {
          selectedPackage: selectedPackage,
          receiver: userData.fullName,
          dormID: dormID,
          email: userData.email,
        });

        Swal.fire({
          icon: 'success',
          title: '‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          text: `‡∏û‡∏±‡∏™‡∏î‡∏∏ ${selectedPackage.length} ‡∏ä‡∏¥‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });

        navigate('info');
      } catch (err) {
        console.error(err);
        Swal.fire({
          icon: 'error',
          title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏î‡πâ',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
      }
    }
  };


  return (
    <div>
      {!userCode ? (
        <PackageScanner
          onDetected={(code) => setUserCode(code)}
          onClose={() => navigate(-1)}
          isDeliverMode = {true}
        />
      ) : userData ? (
        <div>

          <div className='deliver-header'>
            <p>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏</p>
            <h3>{userData.fullName} <strong>(‡∏´‡πâ‡∏≠‡∏á {userData.roomNo})</strong></h3>
            <h2>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {packages.length} ‡∏ä‡∏¥‡πâ‡∏ô</h2>
            <p className='edit-track' onClick={() => setUserCode('')} style={{ marginLeft: 10, cursor: 'pointer', color: 'blue' }}>
              ‡πÅ‡∏™‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà
            </p>
          </div>

          <div className="package-container">
            {packages.length > 0 && (<p>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢</p>)}
            {packages.length > 0 ? (
              packages.map(pkg => (
                <div className={`package-card ${selectedPackage.includes(pkg.id) ? 'selected' : ''}`}
                  key={pkg.id}
                  onClick={() => toggleSelectPackage(pkg.id)}
                  style={{ cursor: 'pointer' }}>

                  <div className="package-image">
                    <img
                      src={pkg.pathToPicture ? `${BASE_URL}${pkg.pathToPicture}` : `${BASE_URL}/packages/default.png`}
                      alt="package"
                    />
                  </div>
                  <div className="package-info">
                    <h2>{pkg.recipientRoomNo} | {pkg.recipientName}</h2>
                    <h3 style={{ color: "#191970" }}>
                      <FontAwesomeIcon icon={faBarcode} /> {pkg.trackingNo}
                    </h3>
                    <p>üóìÔ∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠: {formatThaiDateTime(pkg.registerTime)}</p>
                    <p>üë§ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢: {pkg.registerBy}</p>
                  </div>


                </div>

              ))


            ) : (
              <p style={{ textAlign: 'center', marginTop: '1rem' }}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö</p>
            )}
          </div>

          {selectedPackage.length > 0 && (
            <div style={{ textAlign: 'center', marginTop: '1rem' }}>
              <button onClick={handleDeliver} className='mybtn btn-full-width' style={{ marginBottom: "50px" }}>
                ‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏™‡∏î‡∏∏ ({selectedPackage.length} ‡∏ä‡∏¥‡πâ‡∏ô)
              </button>
            </div>
          )}
        </div>
      ) : (
        <div style={{ display: "flex", justifyContent: "center", marginBottom: 20 }}>
        </div>
      )}
    </div>
  );
};

export default DeliverPackage;
